datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UnitOfMeasurement {
  Grams
  Kilograms
  Milliliters
  Liters
  Teaspoons
  Tablespoons
  Cups
  Pieces
  Others
}

enum OrderStatus {
  Pending
  Confirmed
  Processing
  Shipped
  Delivered
  Cancelled
  Returned
}

enum Label {
  Home
  Office
}

enum Role {
  Admin
  User
}

model User {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  email     String  @unique
  password  String?
  role      Role    @default(User)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurants Restaurant[]
}

model Restaurant {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  address     String
  contact     String
  openingTime String
  closingTime String
  status      String
  wifiCode    String
  postalCode  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  tables   Table[]
  menus    Menu[]
  Order    Order[]
  stock    stock[]
  Employee Employee[]
}

model Table {
  id        String   @id @default(uuid())
  capacity  Int
  reserved  Boolean  @default(false)
  sector    Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  Order Order[]
}

model Category {
  id        String   @id @default(uuid())
  name      String
  Menu      Menu[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Menu {
  id              String      @id @default(uuid())
  image           String
  name            String
  price           String
  isAvailable     String
  preparationTime String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  OrderItem       OrderItem[]
  categoryId      String
  category        Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Order {
  id        String   @id @default(uuid())
  status    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  Table   Table?  @relation(fields: [tableId], references: [id])
  tableId String?

  items        OrderItem[]
  orderAddress OrderAddress?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
  menu     Menu   @relation(fields: [menuId], references: [id])
  menuId   String
}

model OrderAddress {
  id           String  @id @default(uuid())
  fullName     String
  mobileNumber String
  province     String
  city         String
  area         String
  address      String
  landmark     String?
  label        Label

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @unique
}

model stock {
  id                String            @id @default(uuid())
  name              String
  quantity          Int
  unitOfMeasurement UnitOfMeasurement
  cost              Float
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Employee {
  id               String   @id @default(uuid())
  firstName        String
  lastName         String
  email            String   @unique
  address          String?
  salary           Float?
  employmentStatus String?
  gender           String
  contact          String?
  role             String
  emergencyContact String?
  dateOfBirth      String?
  dateOfHire       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  Restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String
}
